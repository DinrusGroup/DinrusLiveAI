/**
В этом классе реализации Искуственного Интеллекта
собраны элементы, касающиеся решения и его реализации.
Механизм принятия решения перенесён в ПроцессорВыбора.
Предполагается, что на начальном этапе в АнализаторЗадач
(TaskAnalyzer) поступает та или иная Задача (Task).
 Задача может иметь форму чисто описательную (строковую).
 Поэтому анализатору необходимо 1)провести парсинг (разбор строки);
 2)построить примерный набор агрументов;
Кроме того, ему нужно 3)выяснить ТипЗадачи (TaskType),
 по которому будет далее рассматриваться МассивРешений (DecisionArray)
 ПроцессоромВыбора нужного решения.

**/
module LiveAI.Decision;


interface ИРешение
{

}

///Общий интерфейс, который будет рассматриваться ПроцессоромВыбора нужного решения.
///Реализующие его классы станут классами-алгоритмами реализации. ПроцессорВыбора
/// (см.модуль LiveAI.ChoiseProcessor)
///должен обеспечить не только правильный выбор из нескольких вариантов, кроме того
/// он же обязан и передавать параметры (агрументы) для класса-реализации решения.
interface ИРеализацияРешения
{
	проц устТип(ткст ТипРеализации);
	ткст дайТип();
	проц устОписание(ткст Описание);
	ткст дайОписание();
	проц устРеализацию(ук Реализация);
	ук дайРеализацию();
	цел реализуй();
}

///Базовый класс ответа на поставленную задачу.
///Через него должен быть найден потомок, который реализует указанный тип задачи. 
///Возможно будет обнаружен целый массив таких потомков. В этом случае потребуется
///их анализ и выбор. Поэтому каждое решение должно поступать в ПроцессорВыбора.
///
class Реализация: ИРеализацияРешения
{

private
	{
		ткст Тип;
		ткст Описание;

		struct Реализация
			{
			
			
			};
	}

public:
	this(){}
	///ТипРеализации должен быть в соответствии с перечнем доступных типов реализации,
	///например, графика, математика, геометрия и т.д. Его, скорее всего, будет передавать
	///АнализаторЗадач
	проц устТип(ткст ТипРеализации){this.Тип = ТипРеализации;}
	ткст дайТип(){return Тип;}

	///ОписаниеРешения = справке к выполняемой функции (алгоритму).
	///АлгоритмыРешений наследуют этот класс.
	проц устОписание(ткст Описание){this.Описание = ОписаниеРеализации;}
	ткст дайОписание(){return Описание;}

	проц устРеализацию(ук Реализация){this.Реализация = Реализация;}
	ук дайРеализацию(){return Реализация;}

	цел реализуй()
	{
	//if(this.)
	}



}


